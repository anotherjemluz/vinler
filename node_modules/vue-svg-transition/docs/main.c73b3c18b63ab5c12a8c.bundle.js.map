{"version":3,"file":"main.c73b3c18b63ab5c12a8c.bundle.js","sources":["webpack:///src/SvgTransition.vue"],"sourcesContent":["<template>\r\n  <svg class=\"js-transition-icon\" :width=\"size.width + 'px'\" :height=\"size.height + 'px'\" :viewBox=\"'0 0 ' + size.width + ' ' + size.height\"\r\n    @click=\"onClick\" @mouseenter=\"onHover\" @mouseleave=\"onHover\">\r\n    <g class=\"js-transition-icon__state\">\r\n      <slot name=\"initial\"></slot>\r\n    </g>\r\n    <g class=\"js-transition-icon__state\" style=\"display:none\">\r\n      <slot></slot>\r\n    </g>\r\n  </svg>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"svg-transition\",\r\n  props: {\r\n    size: {\r\n      type: Object,\r\n      default: function() {\r\n        return {\r\n          height: 32,\r\n          width: 32\r\n        };\r\n      }\r\n    },\r\n    duration: {\r\n      type: Number,\r\n      default: 200\r\n    },\r\n    trigger: {\r\n      type: String,\r\n      default: \"click\"\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      states: [],\r\n      hoverTriggered: false,\r\n      time: {\r\n        start: null,\r\n        total: this.duration\r\n      },\r\n      status: {\r\n        interacted: false,\r\n        animating: false\r\n      }\r\n    };\r\n  },\r\n  methods: {\r\n    performTransition() {\r\n      if (this.status.animating) return;\r\n      window.requestAnimationFrame(this.triggerAnimation.bind(this.$el));\r\n    },\r\n    onClick() {\r\n      this.validateTrigger(\"click\");\r\n    },\r\n    onHover() {\r\n      this.validateTrigger(\"hover\");\r\n    },\r\n    validateTrigger(trigger) {\r\n      if(this.trigger.toLowerCase() === \"none\") {\r\n        return;\r\n      }\r\n      if (this.trigger.toLowerCase() !== trigger) {\r\n        return;\r\n      }\r\n      this.performTransition();\r\n    },\r\n    triggerAnimation(timestamp) {\r\n      let progress = this.getProgress(timestamp);\r\n      this.animateIcon(progress);\r\n      this.checkProgress(progress);\r\n    },\r\n    getProgress(timestamp) {\r\n      if (!this.time.start) this.time.start = timestamp;\r\n      return timestamp - this.time.start;\r\n    },\r\n    checkProgress(progress) {\r\n      //check if animation is complete\r\n      var self = this;\r\n      if (this.time.total > progress) {\r\n        //animation is not over -> start new animation loop\r\n        window.requestAnimationFrame(self.triggerAnimation.bind(self.$el));\r\n      } else {\r\n        //animation is over -> update object properties + group aria attributes\r\n        this.status = {\r\n          interacted: !this.status.interacted,\r\n          animating: false\r\n        };\r\n        this.time.start = null;\r\n        var index = this.getStatusIndex(this.status.interacted);\r\n        this.states[index[0]].removeAttribute(\"aria-hidden\");\r\n        this.states[index[1]].setAttribute(\"aria-hidden\", \"true\");\r\n      }\r\n    },\r\n    animateIcon(progress) {\r\n      if (progress > this.time.total) progress = this.time.total;\r\n      if (0 > progress) progress = 0;\r\n      var index = this.getStatusIndex(this.status.interacted);\r\n      //update group visibility\r\n      this.states[index[0]].style.display =\r\n        progress > this.time.total / 2 ? \"none\" : \"block\";\r\n      this.states[index[1]].style.display =\r\n        progress > this.time.total / 2 ? \"block\" : \"none\";\r\n      //scale group elements\r\n      this.scaleIcon(progress, index[0], index[1]);\r\n    },\r\n    scaleIcon(progress, i, j) {\r\n      var scale1 = ncEaseInOutQuart(\r\n          Math.min(progress, this.time.total / 2),\r\n          1,\r\n          -0.2,\r\n          this.time.total / 2\r\n        ).toFixed(2),\r\n        scale2 = ncEaseInOutQuart(\r\n          Math.max(progress - this.time.total / 2, 0),\r\n          0.2,\r\n          -0.2,\r\n          this.time.total / 2\r\n        ).toFixed(2);\r\n      this.states[i].setAttribute(\r\n        \"transform\",\r\n        \"translate(\" +\r\n          (this.size.width * (1 - scale1)) / 2 +\r\n          \" \" +\r\n          (this.size.height * (1 - scale1)) / 2 +\r\n          \") scale(\" +\r\n          scale1 +\r\n          \")\"\r\n      );\r\n      this.states[j].setAttribute(\r\n        \"transform\",\r\n        \"translate(\" +\r\n          (this.size.width * scale2) / 2 +\r\n          \" \" +\r\n          (this.size.height * scale2) / 2 +\r\n          \") scale(\" +\r\n          (1 - scale2) +\r\n          \")\"\r\n      );\r\n    },\r\n    getStatusIndex(interacted) {\r\n      return interacted ? [1, 0] : [0, 1];\r\n    }\r\n  },\r\n  mounted() {\r\n    this.states = this.$el.querySelectorAll(\".js-transition-icon__state\");\r\n  }\r\n};\r\n\r\nfunction ncEaseInOutQuart(t, b, c, d) {\r\n  if (1 > (t /= d / 2)) return (c / 2) * t * t * t * t + b;\r\n  return (-c / 2) * ((t -= 2) * t * t * t - 2) + b;\r\n}\r\n</script>\r\n"],"mappings":"AAsJA","sourceRoot":""}